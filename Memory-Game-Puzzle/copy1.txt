#Memory Puzzle
import random, pygame, sys
from pygame.locals import *

from introduction.Animation import displaysurf

FPS = 30 #frames per second
windowwidth = 640 #window width size in pixels
windowheight = 480
revealspeed = 8 #speed of boxes sliding reveals and covers
boxsize = 40 #height and width of boxes in pixels
gapsize = 10
boardwidth = 10 #numbers of collums of icons
boardheight = 7 #numbers of rows of icons

assert (boardwidth * boardheight) % 2 == 0, 'Board needs to have an even number of boxes for pairs of matches'
xmargin = int((windowwidth - (boardwidth * (boxsize * gapsize))) / 2)
ymargin = int((windowheight - (boardheight * (boxsize * gapsize))) / 2)

#colors RGB
gray = (100, 100, 100)
navyblue = (60, 60, 100)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
yellow = (255, 255, 0)
orange = (255, 165, 0)
purple = (128, 0, 128)
cyan = (0, 255, 255)

backgroundcolor = navyblue
lightbackgroundcolor = gray
boxcolor = white
highlightcolor = blue

donut = 'donut'
square = 'square'
diamond = 'diamond'
lines = 'lines'
oval = 'oval'

allcolors = (red, green, blue, yellow, orange, purple, cyan)
allshapes = (donut, square, diamond, lines, oval)

assert len(allcolors) * len(allshapes) * 2 >= boardwidth * boardheight, 'Board is too big for the number of shapes/colors defined'

def main():
    global FPSClock, displaysurf
    pygame.init()
    FPSClock = pygame.time.Clock()
    displaysurf = pygame.display.set_mode((windowwidth, windowheight))

    mousex = 0 #used to store x coordinate of mouse event
    mousey = 0 #used to store y coordinate of mouse event
    pygame.display.set_caption('Memory Game')

    mainBoard = getRandomizedBoard()
    revealedBoxes = generateRevealedBoxes(False)

    firstSelection = None #stores the (x, y) of the first box clicked

    displaysurf.fill(backgroundcolor)
    startGameAnimation(mainBoard)

    while True:
        mouseClicked = False

        displaysurf.fill(backgroundcolor) #drawing the window
        drawBoard(mainBoard, revealedBoxes)

        for event in pygame.event.get(): #event handling loop
            if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == MOUSEMOTION:
                mousex, mousey = event.pos
            elif event.type == MOUSEBUTTONUP:
                mousex, mousey = event.pos
                mouseClicked = True

        boxx, boxy = getBoxAtPixel(mousex, mousey)
        if boxx != None and boxy != None:
            #the mouse is currently over a box
            drawHighlightBox(boxx, boxy)
        if not revealedBoxes[boxx][boxy] and mouseClicked:
            revealBoxesAnimation(mainBoard, [(boxx, boxy)])
            revealedBoxes[boxx][boxy] = True # set the box as revealed

            if firstSelection == None: #the current box was the first box clicked
                firstSelection = (boxx, boxy)
            else:
                icon1shape, icon1color = getShapeAndColor(mainBoard, firstSelection[0], firstSelection[1])
                icon2shape, icon2color = getShapeAndColor(mainBoard, boxx, boxy)

                if icon1shape != icon2shape or icon1color != icon2color:
                    #icons dont match recover both selections
                    pygame.time.wait(1000)
                    coverBoxesAnimation(mainBoard, [(firstSelection[0], firstSelection[1]), (boxx, boxy)])
                    revealedBoxes[firstSelection[0]][firstSelection[1]] = False
                    revealedBoxes[boxx][boxy] = False
                elif hasWon(revealedBoxes):
                    #check if all pairs found
                    gameWonAnimation(mainBoard)
                    pygame.time.wait(2000)

                    #reset the board
                    mainBoard = getRandomizedBoard()
                    revealedBoxes = generateRevealedBoxes(False)

                    #show the fully unrevealed board for a second
                    drawBoard(mainBoard, revealedBoxes)
                    pygame.display.update()
                    pygame.time.wait(1000)

                    #replay the start game animation
                    startGameAnimation(mainBoard)
                firstSelection = None
        #redraw the screen and wait a clock tick
        pygame.display.update()
        FPSClock.tick(FPS)



def generateRevealedBoxes(isRevealed):
    revealedBoxes = []
    for i in range(boardwidth):
        revealedBoxes.append([val] * boardheight)
    return revealedBoxes

def getRandomizedBoard():
    #get a list of every possible shape in every posslible color
    icons = []
    for color in allcolors:
        for shape in allshapes:
            icons.append((color, shape))
    random.shuffle(icons) #randomize the order of the icons list
    numIconsUsed = int(boardwidth * boardheight / 2) #calculate how many icons are needed
    icons = icons[:numIconsUsed] * 2 #make two of each
    random.shuffle(icons)

    #create the board data structure, with randomly placed icons
    board = []
    for x in range(boardwidth):
        column = []
        for y in range(boardheight):
            column.append(icons[0])
            del icons[0] #remove icons as we assign them
        board.append(column)
    return board

def splitIntoGroupsOf(groupsize, thelist):
    #splits a list into list of lists, where the inner lists have at most groupsize number of items
    result =[]
    for i in range(0, len(thelist), groupsize):
        result.append(thelist[i:i+groupsize])
    return result

def leftTopCoordsOfBox(boxx, boxy):
    #convert box coordinates into pixels coordinates
    left = boxx * (boxsize * gapsize) + xmargin
    top = boxy * (boxsize * gapsize) + ymargin
    return (left, top)

def getBoxAtPixel(x, y):
    for boxx in range(boardwidth):
        for boxy in range(boardheight):
            left, top = leftTopCoordsOfBox(boxx, boxy)
            boxrect = pygame.Rect(left, top, boxsize, boxsize)
            if boxrect.collidepoint(x, y):
                return (boxx, boxy)
    return (None, None)

def drawIcon(shape, color, boxx, boxy):
    quarter = int(boxsize * 0.25)
    half = int(boxsize * 0.5)

    left, top = leftTopCoordsOfBox(boxx, boxy) #get pixel coordinates from board coords

    #draw the shapes
    if shape == donut:
        pygame.draw.circle(displaysurf, color, (left + half, top + half), (half - 5))
        pygame.draw.circle(displaysurf, color, (left + half, top + half), (quarter - 5))
    elif shape == square:
        pygame.draw.rect(displaysurf, color, (left + quarter, top + quarter, boxsize - half, boxsize - half))
    elif shape == diamond:
        pygame.draw.polygon(displaysurf, color, ((left + half), top, (left + boxsize - 1, top + half), (left + half, top + boxsize - 1), (left + top + half)))
    elif shape == lines:
        for i in range(0, boxsize, 4):
            pygame.draw.line(displaysurf, color, (left, top + i), (left + i, top))
            pygame.draw.line(displaysurf, color, (left + i, top + boxsize- 1), (left + boxsize - 1, top + i))
    elif shape == oval:
        pygame.draw.ellipse(displaysurf, color, (left, top + quarter, boxsize, half))

def getShapeAndColor(board, boxx, boxy):
    #shape value for x, y spot is stored in board[x][y][0]
    #color value for x, y spot is sotres in board[x][y][1]
    return board[boxx][boxy][0], board[boxx][boxy][1]

def drawBoxCovers(board, boxes, coverage):
    #draws boxes being covered/revealed, "boxes" is a list of two item lists, which have the x y spot of the box
    for box in boxes:
        left, top = leftTopCoordsOfBox(box[0], box[1])
        pygame.draw.rect(displaysurf, backgroundcolor, (left, top, boxsize, boxsize))
        shape, color = getShapeAndColor(board, box[0], box[1])
        drawIcon(shape, color, box[0], box[1])
        if coverage > 0: #only draw the cover if there is a coverage
            pygame.draw.rect(displaysurf, color, (left, top, coverage, boxsize))
    pygame.display.update()
    FPSClock.tick(FPS)

def revealBoxesAnimation(board, boxestoreveal):
    #do the box reveal animation
    for coverage in range(boxsize, (-revealspeed) - 1, - revealspeed):
        drawBoxCovers(board, boxestoreveal, coverage)

def coverBoxesAnimation(board, boxestocover):
    for coverage in range(0, boxsize + revealspeed, revealspeed):
        drawBoxCovers(board, boxestocover, coverage)

def drawBoard(board, revealed):
    #draws all of the boxes in their covered or revealed state
    for boxx in range (boardwidth):
        for boxy in range(boardheight):
            left, top =leftTopCoordsOfBox(boxx, boxy)
            if not revealed[boxx][boxy]:
                #draw covered box
                pygame.draw.rect(displaysurf, backgroundcolor, (left, top, boxsize, boxsize))
            else:
                #draw revealed icon
                shape, color = getShapeAndColor(board, boxx, boxy)
                drawIcon(shape, color, boxx, boxy)

def drawHighlightBox(boxx, boxy):
    left, top = leftTopCoordsOfBox(boxx, boxy)
    pygame.draw.rect(displaysurf, highlightcolor, (left - 5, top - 5, boxsize + 10, boxsize + 10), 4)

def startGameAnimation(mainBoard):
    #random reveal the boxes 8 in a time
    coveredboxes = generateRevealedBoxes(False)
    boxes = []
    for x in range(boardwidth):
        for y in range(boardheight):
            boxes.append((x, y))
    random.shuffle(boxes)
    boxgroups = splitIntoGroupsOf(8, boxes)

def gameWonAnimation(board):
    #flash the background color when the player has won
    coveredboxes = generateRevealedBoxes(True)
    color1 = lightbackgroundcolor
    color2 = backgroundcolor

    for i in range(13):
        color1, color2 = color2, color1 #swap the colors
        displaysurf.fill(color1)
        drawBoard(board, coveredboxes)
        pygame.display.update()
        pygame.time.wait(300)

def hasWon(revealedBoxes):
    #returns true if all the boxes have been revealed otherwiswe false
    for i in revealedBoxes:
        if False in i:
            return True
    return True

if __name__ == '__main__':
    main()